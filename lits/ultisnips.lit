@code_type snippets .snippets
@comment_type # %s

@title Ultisnips Snippets

@s all snippets
--- all.snippets
# this file is overwritten in the lit compile process
snippet date
`date +"%a %d %b %Y"`
endsnippet

---

@s snippet snippets
This may sound confusing, but it is just snippets for a .snippets file.
This is just to help write snippets quicker.

--- snippets.snippets
# this file is overwritten in the lit compile process
snippet snip "the snippet snippet"
snippet $1
$2
endsnippet$0

endsnippet
---

@s c snippets
--- c.snippets
# this file is overwritten in the lit compile process
snippet pre "main preamble" w
/* Name: `!p snip.rv = fn` */
/* Purpose: $2 */
/* Author: kab@indepthnotes.com */
/* Donate! indepthnotes.com/donate */

int
main(void)
{
	
	return 0;
}
endsnippet

snippet // "comment" Ai
/* $0 */
endsnippet

snippet pr "printf"
printf("$1${2:\n}", $0);
endsnippet

snippet sc "scanf"
scanf("%${1:f}", &$0);
endsnippet

# kept commented because I use the literate snip instead
# snippet fn "function" b
# ${1:int}
# $2($4)
# {
# 	$0
# }
# endsnippet

snippet if
if ($1) {
	$0
}
endsnippet

snippet else
else {
	$0
}
endsnippet


snippet elif "else if"
else if ($1) {
	$0
}
endsnippet

snippet tern "ternary operator"
($1)? $2 : $3
endsnippet

snippet sw "switch"
switch ($1) {
	$0
}
endsnippet

snippet ca "switch case"
case $1:
	$2
	break;
$0
endsnippet

snippet fa "fall through"
/* FALLTHROUGH */
endsnippet

snippet wh "while"
while ($1) {
	$2
}
$0
endsnippet


snippet do "do while loop"
do {
	$1
} while ($2);
$0
endsnippet

snippet fo "for loop"
for ($1; $2; $3) {
	$4
}
endsnippet

snippet ty "typedef struct"
typedef struct {
	$2
} $1;
endsnippet

snippet cm "comment"
/* $1 */
endsnippet

---

@s literate snippets

please see vim/UltiSnips/literate.snippets directly as it is quite annoying setting literate code block snippets here directly.

@s math snippets

@s setting the proper context
--- mymathtex.snippets --- noWeave
# this file is overwritten in the lit compile process
# from https://vi.stackexchange.com/questions/18490/ultisnips-context-and-tex
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
# If you have http://www.drchip.org/astronaut/vim/vbafiles/amsmath.vba.gz,
# you want to add:
# texMathZones += ['texMathZone'+x for x in ['E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS']]
texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

def isMath():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    if not set(texIgnoreMathZoneIds).isdisjoint(synstackids):
        return False
    return not set(texMathZoneIds).isdisjoint(synstackids)
    # isdisjoint() can short-circuit as soon as a match is found
endglobal

context "isMath()"
priority 100
snippet ... "ldots" iA
\ldots
endsnippet





snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
\centering
${2:\includegraphics[width=0.8\textwidth]{$3}}
\caption{${4:$3}}
\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
\item $0
\end{enumerate}
endsnippet


context "isMath()"
snippet => "implies" Ai
\implies
endsnippet

context "isMath()"
snippet ;; "&" Ai
&
endsnippet


snippet pdf "probability_density_function" i
probability density function
endsnippet


context "isMath()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "isMath()"
snippet iff "iff" i
\iff
endsnippet


snippet rr "Math" wA
\(${1}\) $2
endsnippet


priority -51
snippet mk "Math" Ai
$${1:${VISUAL}}$$0
endsnippet

priority -52
snippet mk "Math" Aw
$${1:${VISUAL}}$$2
endsnippet
snippet dm "Math" wA
$$${1:${VISUAL}}$$$0
endsnippet



context "isMath()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "isMath()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "isMath()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# I am not sure what this is trying to do, and I doubt I need it right now, so I will comment it out
# context "isMath()"
# priority 1000
# snippet '^.*\)/' "() frac" wrA
# `!p
# stripped = match.string[:-1]
# depth = 0
# i = len(stripped) - 1
# while True:
# 	if stripped[i] == ')': depth += 1
# 	if stripped[i] == '(': depth -= 1
# 	if depth == 0: break;
# 	i-=1
# snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
# `{$1}$0
# endsnippet


context "isMath()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "isMath()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

#priority 1000
#snippet math "mathematicablock" w
#math $1 math$0
#endsnippet

#priority 10000
#snippet 'math(.*)math' "math" wr
#`!p
#import subprocess
#code = match.group(1)
#code = 'ToString[' + code + ', TeXForm]'
#snip.rv = subprocess.check_output(['wolframscript', '-code', code])
#`
#endsnippet

# snippet == "equals" iA
# &= $1 \\\\
# endsnippet

context "isMath()"
snippet != "equals" iA
\neq
endsnippet

context "isMath()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "isMath()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "isMath()"
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "isMath()"
snippet vmat "vmat" iA
\begin{vmatrix} $1 \end{vmatrix} $0
endsnippet

context "isMath()"
snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "isMath()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "isMath()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "isMath()"
snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "isMath()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "isMath()"
snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "isMath()"
snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "isMath()"
snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "isMath()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "isMath()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "isMath()"
snippet sum "sum" w
\sum _{i=${1:1}}^{${2:\infty}} ${3:a_k z^k}
endsnippet

context "isMath()"
snippet taylor "taylor" w
\sum _{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "isMath()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "isMath()"
snippet limsup "limsup" w
\limsup_{${1:n} \TO ${2:\infty}}
endsnippet

context "isMath()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "isMath()"
snippet part "partial/partialdx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "isMath()"
snippet pp "partial" i
\partial
endsnippet


context "isMath()"
snippet dif "d/dx" w
\frac{d}{d ${1:x}} $0
endsnippet

context "isMath()"
snippet sq "\sqrt{}" i
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "isMath()"
snippet sr "^2" i
^2
endsnippet

context "isMath()"
snippet cb "^3" iA
^3
endsnippet

context "isMath()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

#snippet rd "to the ... power" iA
#^{($1)}$0
#endsnippet


context "isMath()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "isMath()"
snippet ooo "\infty" iA
\infty
endsnippet

#snippet rij "mrij" i
#(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
#endsnippet

context "isMath()"
snippet <= "leq" iA
\le
endsnippet

context "isMath()"
snippet >= "geq" iA
\ge
endsnippet


context "isMath()"
snippet -= "congruent" iA
\equiv
endsnippet

context "isMath()"
snippet ~= "isomorphic" iA
\cong
endsnippet

context "isMath()"
snippet EE "exists" iA
\exists
endsnippet

context "isMath()"
snippet AA "forall" iA
\forall
endsnippet

context "isMath()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "isMath()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "isMath()"
snippet xii "xi" iA
x_{i}
endsnippet

context "isMath()"
snippet yii "yi" iA
y_{i}
endsnippet

context "isMath()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "isMath()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "isMath()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "isMath()"
snippet xmm "x" iA
x_{m}
endsnippet

#could extend to Z, and beyond?
context "isMath()"
snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
\centering
\begin{tikzpicture}
\begin{axis}[
xmin= ${2:-10}, xmax= ${3:10},
ymin= ${4:-10}, ymax = ${5:10},
axis lines = middle,
]
\addplot[domain=$2:$3, samples=${6:100}]{$7};
\end{axis}
\end{tikzpicture}
\caption{$8}
\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "isMath()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "isMath()"
snippet lll "l" iA
\ell
endsnippet

context "isMath()"
snippet nabl "nabla" iA
\nabla
endsnippet

context "isMath()"
snippet xx "cross" iA
\times
endsnippet

context "isMath()"
priority 100
#TODO
snippet ** "cdot" iA
\cdot
endsnippet

context "isMath()"
snippet norm "norm" i
\|$1\|$0
endsnippet

context "isMath()"
priority 100
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

context "isMath()"
priority 300
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "isMath()"
priority 200
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet


context "isMath()"
priority 100
snippet -> "to" iA
\to
endsnippet

context "isMath()"
priority 100
snippet <- "to" iA
\leftarrow
endsnippet

context "isMath()"
priority 200
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "isMath()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "isMath()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "isMath()"
snippet compl "complement" i
^{c}
endsnippet

context "isMath()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "isMath()"
snippet >> ">>" iA
\gg
endsnippet

context "isMath()"
snippet << "<<" iA
\ll
endsnippet


context "isMath()"
snippet ~~ "~" iA
\approx
endsnippet

context "isMath()"
snippet set "set" w
\\{$1\\} $0
endsnippet

context "isMath()"
snippet || "mid" i
 \mid
endsnippet


context "isMath()"
snippet cc "subset" i
\subset
endsnippet

context "isMath()"
snippet notin "not in " iA
\not\in
endsnippet

context "isMath()"
snippet inn "in " iA
\in
endsnippet

context "isMath()"
snippet NN "n" iA
\mathbb{N}
endsnippet

context "isMath()"
snippet PP "p" iA
\mathbb{P}
endsnippet

context "isMath()"
snippet Nn "cap" iA
\cap
endsnippet

context "isMath()"
snippet UU "cup" iA
\cup
endsnippet

context "isMath()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "isMath()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "isMath()"
snippet OO "emptyset" iA
\emptyset
endsnippet

context "isMath()"
snippet RR "real" iA
\mathbb{R}
endsnippet

context "isMath()"
snippet QQ "Q" iA
\mathbb{Q}
endsnippet

context "isMath()"
snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

context "isMath()"
snippet <! "normal" iA
\triangleleft
endsnippet

context "isMath()"
snippet <> "hokje" iA
\diamond
endsnippet


context "isMath()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "isMath()"
snippet tt "text" i
\text{ $1 }$0
endsnippet

context "isMath()"
snippet case "cases" w
\begin{cases}
$1
\end{cases}
endsnippet

context "isMath()"
snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

context "isMath()"
snippet bigfun "Big function" iA
\begin{align*}
$1: $2 &\longrightarrow $3 \\\\
$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

context "isMath()"
snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

context "isMath()"
priority 10
snippet "bar" "bar" ri
\overline{$1}$0
endsnippet

context "isMath()"
priority 100
snippet "([a-zA-Z])bar" "bar" ri
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "isMath()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

# context "isMath()"
# priority 101
# snippet that "that" iA
# that
# endsnippet

# context "isMath()"
# priority 101
# snippet What "What" iA
# What
# endsnippet

# priority 101
# snippet what "what" iA
# what
# endsnippet

context "isMath()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "isMath()"
snippet letw "let omega" iA
Let $\Omega \subset \mathbb{C}$ be open.
endsnippet


context "isMath()"
snippet HH "H" iA
\mathbb{H}
endsnippet


context "isMath()"
snippet DD "D" iA
\mathbb{D}
endsnippet

context "isMath()"
snippet C "Complex numbers" i
\mathbb{C}
endsnippet

context "isMath()"
snippet E "expectation" i
\mathbb{E}
endsnippet

context "isMath()"
snippet ns "normal_subgroup" i
\triangleleft
endsnippet


# snippet "bold" wA
# **${1:${VISUAL}}**
# endsnippet

context "isMath()"
snippet S "sigma" i
\sigma
endsnippet

context "isMath()"
snippet sps "suppose" wA
suppose
endsnippet

context "isMath()"
snippet bb "mathbb" w
\mathbb{$1}$0
endsnippet

context "isMath()"
snippet cal "mathcal" w
\mathcal{$1}$0
endsnippet


# My greek symbols
context "isMath()"
snippet gA "Alpha" i
\Alpha
endsnippet
context "isMath()"
snippet ga "alpha" i
\alpha
endsnippet


context "isMath()"
snippet gb "beta" i
\beta
endsnippet

context "isMath()"
snippet gB "Beta" i
\Beta
endsnippet

context "isMath()"
snippet gd "delta" i
\delta
endsnippet

context "isMath()"
snippet gD "Delta" i
\Delta
endsnippet

context "isMath()"
snippet ge "epsilon" i
\epsilon
endsnippet

context "isMath()"
snippet gE "Epsilon" i
\Epsilon
endsnippet


context "isMath()"
snippet gg "gamma" i
\gamma
endsnippet

context "isMath()"
snippet gG "gamma" i
\Gamma
endsnippet

context "isMath()"
snippet gl "lambda" i
\lambda
endsnippet

context "isMath()"
snippet gm "mu" i
\mu
endsnippet

context "isMath()"
snippet gO "Omega" i
\Omega
endsnippet

context "isMath()"
snippet go "omega" i
\omega
endsnippet

context "isMath()"
snippet gr "rho" i
\rho
endsnippet

context "isMath()"
snippet gs "sigma" i
\sigma
endsnippet

context "isMath()"
snippet gv "phi" i
\phi
endsnippet

context "isMath()"
snippet gV "phi" i
\Phi
endsnippet

context "isMath()"
snippet gx "chi" i
\chi
endsnippet


context "isMath()"
snippet gy "psi" i
\psi
endsnippet

context "isMath()"
snippet gY "Psi" i
\Psi
endsnippet

context "isMath()"
snippet gt "theta" i
\theta
endsnippet

context "isMath()"
snippet gT "theta" i
\Theta
endsnippet

# My math phrases
snippet cts "continuous" wA
continuous 
endsnippet

snippet iid "iids indepen" wA
independent and identically distributed 
endsnippet

snippet sps "suppose" wA
suppose 
endsnippet

snippet wrt "suppose" wA
with respect to 
endsnippet

---

@s pandoc snippets

--- pandoc.snippets
# this file is overwritten in the lit compile process
priority -50
extends mymathtex
priority 1

snippet pr "Preamble"
# `!v system("/home/kab/docs/my_scripts/my_dezetelify " . expand("%:t"))`

# standard
[wood](wood___20250527_1447_59.pd)

# related

endsnippet

snippet mc "inline code" A
\`${1:${VISUAL}}\`
endsnippet

snippet cm "display code" Ab
~~~{.c .numberLines}
${1:${VISUAL}}
~~~
endsnippet

snippet tr "transclusion include file" b
~~~{.include}
${1:${VISUAL}}
~~~
endsnippet
---

@s markdown

--- markdown.snippets
extends pandoc
---


@s shell snippets

--- shell.snippets
# this file is overwritten in the lit compile process
snippet pr
#!/usr/bin/sh

endsnippet

snippet fo "for loop"
for $1
do
	$2
done
endsnippet

---

--- sh.snippets
# this file is overwritten in the lit compile process
extends shell
---

@s html
--- html.snippets
snippet ta "tag"
<$1>$2</$1>
endsnippet

snippet im
<img src="/assets/$1">
endsnippet

snippet code
<pre><code data-trim data-noescape data-trim class="language-bash">
$1
</code></pre>
endsnippet

---


