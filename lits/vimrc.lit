@code_type vim .vim
@comment_type " %s

@title Vimrc

@s Introduction
Vim is the best tool for editing text.
The power of vim is in its speed, ease of use, and it's customisation.
A vimrc is a program that is enjoyable for the vim user to edit, and a good vimrc $\implies$ a good vim user.

The main philosophy for my vimrc is here.
- The plugins and code should be as minimal as possible
- I should not be afraid to write code for my vimrc file (even if it takes longer to develop and debug, as I am a coder, I should code).
- The code should be simple, readable and obvious. I should be able to look at it in 10 years time (2035) and have a clear understanding of it. If I show this to 1000 programmer they should understand how it works

This vimrc holds 2 roles:
(1) as a game development note taking device, personal public wiki, which will be uploaded.
(2) is as a game development environment.
Including but not limited to C, csound.
Things like Ultisnip snippets may be included here.

@s boilerplate
--- vimrc.vim
@{wincent_load}
@{plugins}
@{functions}
@{set_calls}
@{maps}
@{color}
@{autocommands}
@{plug_settings}
---

@s vim sensible++
Here are some commands that I will always want in a vimrc

@s clipboard

I want to save clipboard on exit.
--- autocommands
autocmd VimLeave,VimSuspend * call system("xsel -ib", getreg('+')) " save clipboard on exit
---

I don't want to `set clipboard=unnamedplus` as I like different registers with different texts.
--- maps
vnoremap <C-c> "+y
nnoremap <C-p> "+p
---

@s clearer insert mode visuals
see https://www.reddit.com/r/vim/comments/11f98uv/prevent_vim_from_clearing_clipboard_on_exit/

--- autocommands +=
" highlight the line in insertmode
autocmd InsertEnter * set cursorline
autocmd InsertLeave * set nocursorline
---

I do have to start thinking about colorschemes next as although highlighting works with `colorscheme torte` our cursorline highlighting is too bright.

In order to change the color we need `syntax on`

--- set_calls
syntax on
---

TODO what does gui and cterm mean here?
--- color
colorscheme torte
set termguicolors
highlight CursorLine guifg=NONE guibg=#333333 gui=NONE cterm=NONE
---

I also like to have my cursor change between insert and command mode.
This is by easier in neovim, or possibly even the default.
--- set_calls +=
" https://nickjanetakis.com/blog/change-your-vim-cursor-from-a-block-to-line-in-normal-and-insert-mode
" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
---

@s quicker edits of vimrc.lit

--- set_calls +=
let mapleader = ','
let maplocaleader = "_"
---

--- maps +=
" easy edit of vimrc
nnoremap <leader>ev <Cmd>edit ~/docs/dotfiles/lits/vimrc.lit<cr>
" cannot be in a function as => a recursive define
nnoremap <leader>sv <Cmd>make lit-vim -C ~/docs/dotfiles/<bar>source $MYVIMRC<cr>
noremap <leader>vv <Cmd>view $MYVIMRC<cr>
---

@s swap `;` with `:`

--- maps +=
nnoremap : ;
nnoremap ; :

vnoremap : ;
vnoremap ; :
---

@s better window and buffer movement
--- maps +=
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
---

The exclaimation in `bn!` is used to force the command regardless of buffer save state.
--- maps +=
nnoremap <leader>l <Cmd>bn!<cr>
nnoremap <leader>h <Cmd>bp!<cr>
---

@s make incsearch disappear on space
`<space>` is quite a good keyboard shortcut and `nohl` doesn't quite live up to `<space>`.

--- maps +=
nnoremap <space> <Cmd>nohl<cr>
---

@s cute tab character

the `tab:\|\` gives a `|` sign whenever there is a tab, making vim look more like an IDE that is showing tabs.
--- set_calls +=
set list
set listchars=tab:\|\ ,trail:-,extends:>,precedes:<,nbsp:+
set tabstop=4
set softtabstop=4
set shiftwidth=4
---

Give some color to tabs
--- color +=
highlight SpecialKey guifg=#888888
---

@s backup and undo
--- set_calls +=
set backup writebackup
set backupdir=/home/kab/docs/vimtmp//,.
set directory=/home/kab/docs/vimtmp//,. " for swapfile

set undodir=~/.config/vim/undodir
set undofile
set undolevels=10000 " max no of changes possible to undo
set undoreload=100000 " max no of lines to save for undo on a buffer reload
---

@s show line numbers
TODO I want to be able to switch between showing absolute and relative
--- set_calls +=
set number
---

@s line wrap
---
set breakindent " preserve horizontal whitespace when wrapping
set linebreak " break at words rather than at characters
set wrap
---

@s pop up menu

@s folding

@s other vimsensible commands too short for their own module
--- set_calls +=
set scrolloff=3 " keep three lines between the cursor and the edge of the screen
set mouse=a " add mouse support for all editor modes bar hit-enter and more-prompt
set splitright splitbelow
---

@s ctags
--- set_calls +=
set tags=/home/kab/applications/raylib/src/tags
---

@s pretty line print
--- functions
function! Pretty_line_print() abort
	s/\([\.!?!]\) \+/\1\r/g
endfunction
---

--- maps +=
nnoremap <leader>p :call Pretty_line_print()<cr>
---

@s wiki without vimwiki
- Here are a list of features that I need:
	- easy travelling between zetels, i.e. with enter:
		- go to old page by default, but have another command to force a new zetel
		- in visual mode, if I want to make a link, convert all whitespaces in that visual selection into '_', then do usual link making.
		- when making a new zetel, search for the exact word in the wiki in order to suggest linking.
	- easy creation of zetel words (turning note into note___2025_02_28_1029_01 when I hit enter)
	- easy searching for notes (fast, and predictable output)
	- omnicompletion to link to other headers (and possibly other lines of text):
		- in pdf form, we should print out line numbers at the start and link to line numbers
	- math latex text conceal
	- quickly see the output in html which is a commercial website quality:
		- run a system pandoc command
	- able to render well in pdf
	- generate backlinks
	- syntax highlight tags with easy search of them
	- text conceal links to hide timestamps
	- text conceal math
	- easy replace other instances of a word with its link
	- generate backlinks (when making a new link generate a backlink)
	- using "=" to make a title, though we want to use another key as we want folding.
	- on close append visits comment.

why do I chose pandoc?
Pandoc markdown is the closest thing to "standard markdown" that we have.
It is also a tool that most people should have as it is so versatile.
It is clearly supported to the largest variety of output documents.

@s easy travelling between zetels, i.e. with enter

--- autocommands +=
augroup wiki
	au!
	@{wiki_autocommands}
augroup END
---

--- wiki_autocommands
	autocmd Filetype pandoc nnoremap <buffer> <enter> <Cmd>call IndepthWikiEnterNormal()<cr>
	autocmd Filetype pandoc vnoremap <buffer> <enter> <Cmd>call IndepthWikiEnterVisual()<cr>
	autocmd Filetype pandoc set conceallevel=1
	autocmd Filetype pandoc nnoremap <buffer> gf :e <cfile><cr>
	autocmd FileType pandoc nnoremap <buffer> <c-f> :!my_linkify $(fzf) \| xsel -b<cr>
---

--- functions +=
function! IndepthWikiEnterNormal() abort
	let word = expand("<cword>")
	@{check_if_file_is_already_there}
	let zetname = system("/home/kab/docs/my_scripts/myzetelify " . word)
	execute "normal! ciw" . zetname . "\<Esc>"
	normal h
	write!
endfunction
---

In visual mode, I want to replace spaces with underscores and then call `IndepthWikiEnterNormal()`.

--- functions +=
function! IndepthWikiEnterVisual() abort
	'<,'>s/\%V /_/g
endfunction
---

@s math highlighting and snippets

--- syntax/mymathtex.vim

---

--- check_if_file_is_already_there
" let found_words = system('/home/kab/docs/my_scripts/mysearchzets ' . word)
" let found_words_choices = system('/home/kab/docs/my_scripts/mymakevimdialog ' . found_words)
" let word_choice_input = confirm(found_words, "type number or leave blank:")
" 
" let no_of_possible_choices = system('echo ' . found_word_choices . ' | wc -l')
" 
" if (word_choice_input <= no_of_possible_choices) && (word_choice_input != 0)
" 	" TODO choice the right file and zetelify and write here
" endif

---

@s Built-in plugin manager by Wincent
It will be nice to be able to easily send pull requests to plugins, and with the builtin method of having a plugin, this is streamlined.
It is also part of my principles to hardcode things wherever possible.

Credit to Greg Hurell.
https://www.youtube.com/watch?v=X2_R3uxDN6g

The commands such as `plugInstall` and `plugUpdate` can be delegated to git.
See the following text file for a reference of commands.

TODO make into a shell script that does this interactively.

To initialise in you config folder add the folders `pack/USER/opt` and replace USER with your username if you like.

To remove do `git rm $DEST`

--- myvimplugadd.sh
#!/bin/bash
#NAME is what git uses internally
NAME=$1
#DEST is the name of the folder
DEST=$1
URL=$2
cd ${HOME}/docs/dotfiles/vim/pack/kab/opt/
git submodule add --name $NAME $URL $DEST
vim -u NONE -c "helptags $DEST/doc" -c q
---

--- myvimplugupdate.sh
#!/bin/bash
cd ${HOME}/docs/dotfiles/vim/pack/kab/opt/
git submodule update --remote
---

--- wincent_load
" from https://github.com/wincent/wincent/blob/main/aspects/nvim/files/.config/nvim/lua/wincent/plugin/load.lua
function! WincentLoad(plugin) abort
	if v:vim_did_enter == 1
		" Modifies 'runtimepath' _and_ sources files
		execute "packadd " . a:plugin
	else
		"Just modifies 'runtimepath'; Vim will source the files later
		"as part of |load-plugins| proces
		execute "packadd! " . a:plugin
	endif
endfunction
---

@s Universal plugins

@s vim-airline
The nice thing about airline is that it is absolutely clear when I am in insert mode or visual mode.
--- plugins
call WincentLoad("vim-airline")
---

@s tabular
--- plugins +=
call WincentLoad("tabular")
---

--- functions +=
function! DefaultTab() abort
	:Tabularize /\t
endfunction

function! CsoundTab() abort
	:Tabularize /\S\+/l0l2
endfunction
---

--- maps +=
nnoremap <leader>a <Cmd>call DefaultTab()<cr>
---

@s vim-commentary
--- plugins +=
call WincentLoad("vim-commentary")
---

--- wiki_autocommands +=
autocmd FileType pandoc setlocal commentstring=<!--\ %s\ -->
---

@s vim-sensible
--- plugins +=
call WincentLoad("vim-sensible") " check this plugin and see if you really need it
---

@s traces-vim
--- plugins +=
call WincentLoad("traces-vim")
---

--- set_calls +=
set hlsearch
set incsearch
---

@s undotree
--- plugins +=
call WincentLoad("undotree")
---

--- maps +=
nnoremap <leader>u <cmd>UndotreeToggle<cr>
---

/* --- mistake += */

/* --- */

@s text objects with targets.vim
--- plugins +=
call WincentLoad("targets-vim")
---

@s understanding targets creation with line-targets.vim
--- plugins +=
call WincentLoad("line-targets-vim")
---

@s text-objects

@s c text-objects
I should look at https://www.youtube.com/watch?v=JnD9Uro_oqc for inspiration on how far we can take text objects.

@s c comments
I want to be able to delete within a comment, delete around a comment as well as the nice functions of targets.vim, such as deleting the next comment or the last comment
git@github.com:kabIndepthnotes/c-targets-vim.git

@s Git plugins
--- plugins +=
call WincentLoad("gv")
call WincentLoad("vim-fugitive")
---

--- set_calls +=
nnoremap <leader>gs <cmd>Git<cr>
nnoremap <leader>gc <cmd>Git commit<cr>
nnoremap <leader>gv <cmd>GV<cr>
---

@s literate plugins

--- plugins +=
call WincentLoad("literate-vim")
call WincentLoad("neomake")
---

--- plug_settings
call neomake#configure#automake('w')
---

@s ultisnips
--- plugins +=
call WincentLoad("ultisnips")
---

--- maps +=
nnoremap <leader>sn <Cmd>UltiSnipsEdit<cr>
---

--- plug_settings +=
" from ultisnips github page
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>" " gilles castel set this to <tab>
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
" let g:UltiSnipsExpandTrigger="<Right>"
" let g:UltiSnipsJumpForwardTrigger="<Right>" " gilles castel set this to <tab>
" let g:UltiSnipsJumpBackwardTrigger="<Left>"
---

see ultisnips.lit for all snippets

@s faster personal wiki
- pandoc markdown wiki

@s Color Equations or Colorized Equations
This will probably be best in a seperate plugin

@s text objects

@s AI pair programmer
- use gemini as it is based on google (regulated and good for code review, has a good free tier)

--- plugins +=
call WincentLoad("denops-vim")
call WincentLoad("futago-vim")
---

--- plug_settings +=
" futago
let g:denops#server#deno_args = ['-q', '--no-lock', '--unstable-kv', '-A']
---

--- maps +=
nnoremap <leader>bs <cmd>FutagoStartChat<cr>
nnoremap <leader>bh <cmd>FutagoHistory<cr>
nnoremap <leader>bc <cmd>FutagoGitCommit<cr>
---

@s debug

