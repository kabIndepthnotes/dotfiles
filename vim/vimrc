" vimrc.vim
" wincent_load
" from https://github.com/wincent/wincent/blob/main/aspects/nvim/files/.config/nvim/lua/wincent/plugin/load.lua
function! WincentLoad(plugin) abort
	if v:vim_did_enter == 1
		" Modifies 'runtimepath' _and_ sources files
		execute "packadd " . a:plugin
	else
		"Just modifies 'runtimepath'; Vim will source the files later
		"as part of |load-plugins| proces
		execute "packadd! " . a:plugin
	endif
endfunction

" plugins
call WincentLoad("vim-airline")
call WincentLoad("tabular")
call WincentLoad("vim-commentary")
call WincentLoad("vim-sensible") " check this plugin and see if you really need it
call WincentLoad("traces-vim")
call WincentLoad("undotree")
call WincentLoad("gv")
call WincentLoad("vim-fugitive")
call WincentLoad("literate-vim")
call WincentLoad("neomake")
call WincentLoad("ultisnips")

" autocommands
autocmd VimLeave,VimSuspend * call system("xsel -ib", getreg('+')) " save clipboard on exit
" highlight the line in insertmode
autocmd InsertEnter * set cursorline
autocmd InsertLeave * set nocursorline
augroup wiki
	au!
	autocmd Filetype pandoc nnoremap <buffer> <leader>mz <Cmd>call IndepthWikiEnterNormal()<cr>
	autocmd Filetype pandoc nnoremap <buffer> gf :e <cfile><cr>
augroup END

" set_calls
syntax on
" https://nickjanetakis.com/blog/change-your-vim-cursor-from-a-block-to-line-in-normal-and-insert-mode
" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
let mapleader = ','
let maplocaleader = "_"
set list
set listchars=tab:\|\ ,trail:-,extends:>,precedes:<,nbsp:+
set tabstop=4
set softtabstop=4
set shiftwidth=4
set backup writebackup
set backupdir=/home/kab/docs/vimtmp//,.
set directory=/home/kab/docs/vimtmp//,. " for swapfile

set undodir=~/.config/vim/undodir
set undofile
set undolevels=10000 " max no of changes possible to undo
set undoreload=100000 " max no of lines to save for undo on a buffer reload
set number
set scrolloff=3 " keep three lines between the cursor and the edge of the screen
set mouse=a " add mouse support for all editor modes bar hit-enter and more-prompt
set splitright splitbelow
set hlsearch
set incsearch

" maps
vnoremap <C-c> "+y
nnoremap <C-p> "+p
" easy edit of vimrc
nnoremap <leader>ev <Cmd>edit ~/docs/dotfiles/lits/vimrc.lit<cr>
" cannot be in a function as => a recursive define
nnoremap <leader>sv <Cmd>make lit-vim -C ~/docs/dotfiles/<bar>source $MYVIMRC<cr>
noremap <leader>vv <Cmd>view $MYVIMRC<cr>
nnoremap : ;
nnoremap ; :

vnoremap : ;
vnoremap ; :
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader>l <Cmd>bn!<cr>
nnoremap <leader>h <Cmd>bp!<cr>
nnoremap <space> <Cmd>nohl<cr>
nnoremap <leader>sn <Cmd>UltiSnipsEdit<cr>

" color
colorscheme torte
set termguicolors
highlight CursorLine guifg=NONE guibg=#333333 gui=NONE cterm=NONE
highlight SpecialKey guifg=#888888

" functions
function! IndepthWikiEnterNormal() abort
	let word = expand("<cword>")
	" check_if_file_is_already_there
	" let found_words = system('/home/kab/docs/my_scripts/mysearchzets ' . word)
	" let found_words_choices = system('/home/kab/docs/my_scripts/mymakevimdialog ' . found_words)
	" let word_choice_input = confirm(found_words, "type number or leave blank:")
	" 
	" let no_of_possible_choices = system('echo ' . found_word_choices . ' | wc -l')
	" 
	" if (word_choice_input <= no_of_possible_choices) && (word_choice_input != 0)
	" 	" TODO choice the right file and zetelify and write here
	" endif
	

	let zetname = system("/home/kab/docs/my_scripts/myzetelify " . word)
	execute "normal! ciw" . zetname . "\<Esc>"
	normal <c-o>
endfunction
function! DefaultTab() abort
	:Tabularize /\t
endfunction

function! CsoundTab() abort
	:Tabularize /\S\+/l0l2
endfunction

" plug_settings
call neomake#configure#automake('w')
" from ultisnips github page
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-tab>" " gilles castel set this to <tab>
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetStorageDirectoryForUltiSnipsEdit="/home/kab/docs/dotfiles/vim/UltiSnips/"


